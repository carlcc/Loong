// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOONGVERTEX_LOONG_ASSET_FBS_H_
#define FLATBUFFERS_GENERATED_LOONGVERTEX_LOONG_ASSET_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace Loong {
namespace Asset {
namespace Fbs {

struct Vec2;

struct Vec3;

struct AABB;

struct Vertex;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2() {
    memset(static_cast<void *>(this), 0, sizeof(Vec2));
  }
  Vec2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  void mutate_x(float _x) {
    flatbuffers::WriteScalar(&x_, _x);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  void mutate_y(float _y) {
    flatbuffers::WriteScalar(&y_, _y);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(static_cast<void *>(this), 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  void mutate_x(float _x) {
    flatbuffers::WriteScalar(&x_, _x);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  void mutate_y(float _y) {
    flatbuffers::WriteScalar(&y_, _y);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
  void mutate_z(float _z) {
    flatbuffers::WriteScalar(&z_, _z);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) AABB FLATBUFFERS_FINAL_CLASS {
 private:
  Loong::Asset::Fbs::Vec3 Min_;
  Loong::Asset::Fbs::Vec3 Max_;

 public:
  AABB() {
    memset(static_cast<void *>(this), 0, sizeof(AABB));
  }
  AABB(const Loong::Asset::Fbs::Vec3 &_Min, const Loong::Asset::Fbs::Vec3 &_Max)
      : Min_(_Min),
        Max_(_Max) {
  }
  const Loong::Asset::Fbs::Vec3 &Min() const {
    return Min_;
  }
  Loong::Asset::Fbs::Vec3 &mutable_Min() {
    return Min_;
  }
  const Loong::Asset::Fbs::Vec3 &Max() const {
    return Max_;
  }
  Loong::Asset::Fbs::Vec3 &mutable_Max() {
    return Max_;
  }
};
FLATBUFFERS_STRUCT_END(AABB, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vertex FLATBUFFERS_FINAL_CLASS {
 private:
  Loong::Asset::Fbs::Vec3 Position_;
  Loong::Asset::Fbs::Vec2 Uv0_;
  Loong::Asset::Fbs::Vec2 Uv1_;
  Loong::Asset::Fbs::Vec3 Normal_;
  Loong::Asset::Fbs::Vec3 Tangent_;
  Loong::Asset::Fbs::Vec3 Bitangent_;

 public:
  Vertex() {
    memset(static_cast<void *>(this), 0, sizeof(Vertex));
  }
  Vertex(const Loong::Asset::Fbs::Vec3 &_Position, const Loong::Asset::Fbs::Vec2 &_Uv0, const Loong::Asset::Fbs::Vec2 &_Uv1, const Loong::Asset::Fbs::Vec3 &_Normal, const Loong::Asset::Fbs::Vec3 &_Tangent, const Loong::Asset::Fbs::Vec3 &_Bitangent)
      : Position_(_Position),
        Uv0_(_Uv0),
        Uv1_(_Uv1),
        Normal_(_Normal),
        Tangent_(_Tangent),
        Bitangent_(_Bitangent) {
  }
  const Loong::Asset::Fbs::Vec3 &Position() const {
    return Position_;
  }
  Loong::Asset::Fbs::Vec3 &mutable_Position() {
    return Position_;
  }
  const Loong::Asset::Fbs::Vec2 &Uv0() const {
    return Uv0_;
  }
  Loong::Asset::Fbs::Vec2 &mutable_Uv0() {
    return Uv0_;
  }
  const Loong::Asset::Fbs::Vec2 &Uv1() const {
    return Uv1_;
  }
  Loong::Asset::Fbs::Vec2 &mutable_Uv1() {
    return Uv1_;
  }
  const Loong::Asset::Fbs::Vec3 &Normal() const {
    return Normal_;
  }
  Loong::Asset::Fbs::Vec3 &mutable_Normal() {
    return Normal_;
  }
  const Loong::Asset::Fbs::Vec3 &Tangent() const {
    return Tangent_;
  }
  Loong::Asset::Fbs::Vec3 &mutable_Tangent() {
    return Tangent_;
  }
  const Loong::Asset::Fbs::Vec3 &Bitangent() const {
    return Bitangent_;
  }
  Loong::Asset::Fbs::Vec3 &mutable_Bitangent() {
    return Bitangent_;
  }
};
FLATBUFFERS_STRUCT_END(Vertex, 64);

}  // namespace Fbs
}  // namespace Asset
}  // namespace Loong

#endif  // FLATBUFFERS_GENERATED_LOONGVERTEX_LOONG_ASSET_FBS_H_
