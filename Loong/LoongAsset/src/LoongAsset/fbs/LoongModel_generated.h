// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOONGMODEL_LOONG_ASSET_FBS_H_
#define FLATBUFFERS_GENERATED_LOONGMODEL_LOONG_ASSET_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "LoongVertex_generated.h"

namespace Loong {
namespace Asset {
namespace Fbs {

struct LoongMesh;
struct LoongMeshBuilder;
struct LoongMeshT;

struct LoongModel;
struct LoongModelBuilder;
struct LoongModelT;

struct LoongMeshT : public flatbuffers::NativeTable {
  typedef LoongMesh TableType;
  std::vector<Loong::Asset::Fbs::Vertex> Vertices;
  std::vector<uint32_t> Indices;
  uint32_t MaterialIndex;
  std::unique_ptr<Loong::Asset::Fbs::AABB> Aabb;
  LoongMeshT()
      : MaterialIndex(0) {
  }
};

struct LoongMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoongMeshT NativeTableType;
  typedef LoongMeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_INDICES = 6,
    VT_MATERIALINDEX = 8,
    VT_AABB = 10
  };
  const flatbuffers::Vector<const Loong::Asset::Fbs::Vertex *> *Vertices() const {
    return GetPointer<const flatbuffers::Vector<const Loong::Asset::Fbs::Vertex *> *>(VT_VERTICES);
  }
  flatbuffers::Vector<const Loong::Asset::Fbs::Vertex *> *mutable_Vertices() {
    return GetPointer<flatbuffers::Vector<const Loong::Asset::Fbs::Vertex *> *>(VT_VERTICES);
  }
  const flatbuffers::Vector<uint32_t> *Indices() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  flatbuffers::Vector<uint32_t> *mutable_Indices() {
    return GetPointer<flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  uint32_t MaterialIndex() const {
    return GetField<uint32_t>(VT_MATERIALINDEX, 0);
  }
  bool mutate_MaterialIndex(uint32_t _MaterialIndex) {
    return SetField<uint32_t>(VT_MATERIALINDEX, _MaterialIndex, 0);
  }
  const Loong::Asset::Fbs::AABB *Aabb() const {
    return GetStruct<const Loong::Asset::Fbs::AABB *>(VT_AABB);
  }
  Loong::Asset::Fbs::AABB *mutable_Aabb() {
    return GetStruct<Loong::Asset::Fbs::AABB *>(VT_AABB);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(Vertices()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(Indices()) &&
           VerifyField<uint32_t>(verifier, VT_MATERIALINDEX) &&
           VerifyField<Loong::Asset::Fbs::AABB>(verifier, VT_AABB) &&
           verifier.EndTable();
  }
  LoongMeshT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(LoongMeshT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<LoongMesh> Pack(flatbuffers::FlatBufferBuilder &_fbb, const LoongMeshT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct LoongMeshBuilder {
  typedef LoongMesh Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Vertices(flatbuffers::Offset<flatbuffers::Vector<const Loong::Asset::Fbs::Vertex *>> Vertices) {
    fbb_.AddOffset(LoongMesh::VT_VERTICES, Vertices);
  }
  void add_Indices(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Indices) {
    fbb_.AddOffset(LoongMesh::VT_INDICES, Indices);
  }
  void add_MaterialIndex(uint32_t MaterialIndex) {
    fbb_.AddElement<uint32_t>(LoongMesh::VT_MATERIALINDEX, MaterialIndex, 0);
  }
  void add_Aabb(const Loong::Asset::Fbs::AABB *Aabb) {
    fbb_.AddStruct(LoongMesh::VT_AABB, Aabb);
  }
  explicit LoongMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoongMeshBuilder &operator=(const LoongMeshBuilder &);
  flatbuffers::Offset<LoongMesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoongMesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoongMesh> CreateLoongMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const Loong::Asset::Fbs::Vertex *>> Vertices = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Indices = 0,
    uint32_t MaterialIndex = 0,
    const Loong::Asset::Fbs::AABB *Aabb = 0) {
  LoongMeshBuilder builder_(_fbb);
  builder_.add_Aabb(Aabb);
  builder_.add_MaterialIndex(MaterialIndex);
  builder_.add_Indices(Indices);
  builder_.add_Vertices(Vertices);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoongMesh> CreateLoongMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<Loong::Asset::Fbs::Vertex> *Vertices = nullptr,
    const std::vector<uint32_t> *Indices = nullptr,
    uint32_t MaterialIndex = 0,
    const Loong::Asset::Fbs::AABB *Aabb = 0) {
  auto Vertices__ = Vertices ? _fbb.CreateVectorOfStructs<Loong::Asset::Fbs::Vertex>(*Vertices) : 0;
  auto Indices__ = Indices ? _fbb.CreateVector<uint32_t>(*Indices) : 0;
  return Loong::Asset::Fbs::CreateLoongMesh(
      _fbb,
      Vertices__,
      Indices__,
      MaterialIndex,
      Aabb);
}

flatbuffers::Offset<LoongMesh> CreateLoongMesh(flatbuffers::FlatBufferBuilder &_fbb, const LoongMeshT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct LoongModelT : public flatbuffers::NativeTable {
  typedef LoongModel TableType;
  std::vector<std::unique_ptr<Loong::Asset::Fbs::LoongMeshT>> Meshes;
  std::vector<std::string> MaterialNames;
  std::unique_ptr<Loong::Asset::Fbs::AABB> Aabb;
  LoongModelT() {
  }
};

struct LoongModel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoongModelT NativeTableType;
  typedef LoongModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESHES = 4,
    VT_MATERIALNAMES = 6,
    VT_AABB = 8
  };
  const flatbuffers::Vector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>> *Meshes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>> *>(VT_MESHES);
  }
  flatbuffers::Vector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>> *mutable_Meshes() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>> *>(VT_MESHES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *MaterialNames() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_MATERIALNAMES);
  }
  flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *mutable_MaterialNames() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_MATERIALNAMES);
  }
  const Loong::Asset::Fbs::AABB *Aabb() const {
    return GetStruct<const Loong::Asset::Fbs::AABB *>(VT_AABB);
  }
  Loong::Asset::Fbs::AABB *mutable_Aabb() {
    return GetStruct<Loong::Asset::Fbs::AABB *>(VT_AABB);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESHES) &&
           verifier.VerifyVector(Meshes()) &&
           verifier.VerifyVectorOfTables(Meshes()) &&
           VerifyOffset(verifier, VT_MATERIALNAMES) &&
           verifier.VerifyVector(MaterialNames()) &&
           verifier.VerifyVectorOfStrings(MaterialNames()) &&
           VerifyField<Loong::Asset::Fbs::AABB>(verifier, VT_AABB) &&
           verifier.EndTable();
  }
  LoongModelT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(LoongModelT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<LoongModel> Pack(flatbuffers::FlatBufferBuilder &_fbb, const LoongModelT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct LoongModelBuilder {
  typedef LoongModel Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Meshes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>>> Meshes) {
    fbb_.AddOffset(LoongModel::VT_MESHES, Meshes);
  }
  void add_MaterialNames(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> MaterialNames) {
    fbb_.AddOffset(LoongModel::VT_MATERIALNAMES, MaterialNames);
  }
  void add_Aabb(const Loong::Asset::Fbs::AABB *Aabb) {
    fbb_.AddStruct(LoongModel::VT_AABB, Aabb);
  }
  explicit LoongModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoongModelBuilder &operator=(const LoongModelBuilder &);
  flatbuffers::Offset<LoongModel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoongModel>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoongModel> CreateLoongModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>>> Meshes = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> MaterialNames = 0,
    const Loong::Asset::Fbs::AABB *Aabb = 0) {
  LoongModelBuilder builder_(_fbb);
  builder_.add_Aabb(Aabb);
  builder_.add_MaterialNames(MaterialNames);
  builder_.add_Meshes(Meshes);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoongModel> CreateLoongModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>> *Meshes = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *MaterialNames = nullptr,
    const Loong::Asset::Fbs::AABB *Aabb = 0) {
  auto Meshes__ = Meshes ? _fbb.CreateVector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>>(*Meshes) : 0;
  auto MaterialNames__ = MaterialNames ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*MaterialNames) : 0;
  return Loong::Asset::Fbs::CreateLoongModel(
      _fbb,
      Meshes__,
      MaterialNames__,
      Aabb);
}

flatbuffers::Offset<LoongModel> CreateLoongModel(flatbuffers::FlatBufferBuilder &_fbb, const LoongModelT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline LoongMeshT *LoongMesh::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<Loong::Asset::Fbs::LoongMeshT> _o = std::unique_ptr<Loong::Asset::Fbs::LoongMeshT>(new LoongMeshT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void LoongMesh::UnPackTo(LoongMeshT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Vertices(); if (_e) { _o->Vertices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->Vertices[_i] = *_e->Get(_i); } } }
  { auto _e = Indices(); if (_e) { _o->Indices.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->Indices[_i] = _e->Get(_i); } } }
  { auto _e = MaterialIndex(); _o->MaterialIndex = _e; }
  { auto _e = Aabb(); if (_e) _o->Aabb = std::unique_ptr<Loong::Asset::Fbs::AABB>(new Loong::Asset::Fbs::AABB(*_e)); }
}

inline flatbuffers::Offset<LoongMesh> LoongMesh::Pack(flatbuffers::FlatBufferBuilder &_fbb, const LoongMeshT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateLoongMesh(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<LoongMesh> CreateLoongMesh(flatbuffers::FlatBufferBuilder &_fbb, const LoongMeshT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const LoongMeshT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Vertices = _o->Vertices.size() ? _fbb.CreateVectorOfStructs(_o->Vertices) : 0;
  auto _Indices = _o->Indices.size() ? _fbb.CreateVector(_o->Indices) : 0;
  auto _MaterialIndex = _o->MaterialIndex;
  auto _Aabb = _o->Aabb ? _o->Aabb.get() : 0;
  return Loong::Asset::Fbs::CreateLoongMesh(
      _fbb,
      _Vertices,
      _Indices,
      _MaterialIndex,
      _Aabb);
}

inline LoongModelT *LoongModel::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<Loong::Asset::Fbs::LoongModelT> _o = std::unique_ptr<Loong::Asset::Fbs::LoongModelT>(new LoongModelT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void LoongModel::UnPackTo(LoongModelT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Meshes(); if (_e) { _o->Meshes.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->Meshes[_i] = std::unique_ptr<Loong::Asset::Fbs::LoongMeshT>(_e->Get(_i)->UnPack(_resolver)); } } }
  { auto _e = MaterialNames(); if (_e) { _o->MaterialNames.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->MaterialNames[_i] = _e->Get(_i)->str(); } } }
  { auto _e = Aabb(); if (_e) _o->Aabb = std::unique_ptr<Loong::Asset::Fbs::AABB>(new Loong::Asset::Fbs::AABB(*_e)); }
}

inline flatbuffers::Offset<LoongModel> LoongModel::Pack(flatbuffers::FlatBufferBuilder &_fbb, const LoongModelT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateLoongModel(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<LoongModel> CreateLoongModel(flatbuffers::FlatBufferBuilder &_fbb, const LoongModelT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const LoongModelT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Meshes = _o->Meshes.size() ? _fbb.CreateVector<flatbuffers::Offset<Loong::Asset::Fbs::LoongMesh>> (_o->Meshes.size(), [](size_t i, _VectorArgs *__va) { return CreateLoongMesh(*__va->__fbb, __va->__o->Meshes[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _MaterialNames = _o->MaterialNames.size() ? _fbb.CreateVectorOfStrings(_o->MaterialNames) : 0;
  auto _Aabb = _o->Aabb ? _o->Aabb.get() : 0;
  return Loong::Asset::Fbs::CreateLoongModel(
      _fbb,
      _Meshes,
      _MaterialNames,
      _Aabb);
}

inline const Loong::Asset::Fbs::LoongModel *GetLoongModel(const void *buf) {
  return flatbuffers::GetRoot<Loong::Asset::Fbs::LoongModel>(buf);
}

inline const Loong::Asset::Fbs::LoongModel *GetSizePrefixedLoongModel(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Loong::Asset::Fbs::LoongModel>(buf);
}

inline LoongModel *GetMutableLoongModel(void *buf) {
  return flatbuffers::GetMutableRoot<LoongModel>(buf);
}

inline const char *LoongModelIdentifier() {
  return "LMDL";
}

inline bool LoongModelBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LoongModelIdentifier());
}

inline bool VerifyLoongModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Loong::Asset::Fbs::LoongModel>(LoongModelIdentifier());
}

inline bool VerifySizePrefixedLoongModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Loong::Asset::Fbs::LoongModel>(LoongModelIdentifier());
}

inline void FinishLoongModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Loong::Asset::Fbs::LoongModel> root) {
  fbb.Finish(root, LoongModelIdentifier());
}

inline void FinishSizePrefixedLoongModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Loong::Asset::Fbs::LoongModel> root) {
  fbb.FinishSizePrefixed(root, LoongModelIdentifier());
}

inline std::unique_ptr<Loong::Asset::Fbs::LoongModelT> UnPackLoongModel(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Loong::Asset::Fbs::LoongModelT>(GetLoongModel(buf)->UnPack(res));
}

inline std::unique_ptr<Loong::Asset::Fbs::LoongModelT> UnPackSizePrefixedLoongModel(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Loong::Asset::Fbs::LoongModelT>(GetSizePrefixedLoongModel(buf)->UnPack(res));
}

}  // namespace Fbs
}  // namespace Asset
}  // namespace Loong

#endif  // FLATBUFFERS_GENERATED_LOONGMODEL_LOONG_ASSET_FBS_H_
